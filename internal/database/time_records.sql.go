// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_records.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTimeRecord = `-- name: CreateTimeRecord :one
INSERT INTO time_records(id, start_time, user_id)
VALUES ($1, $2, $3)
RETURNING id, start_time, stop_time, duration, user_id
`

type CreateTimeRecordParams struct {
	ID        uuid.UUID
	StartTime time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateTimeRecord(ctx context.Context, arg CreateTimeRecordParams) (TimeRecord, error) {
	row := q.db.QueryRowContext(ctx, createTimeRecord, arg.ID, arg.StartTime, arg.UserID)
	var i TimeRecord
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.StopTime,
		&i.Duration,
		&i.UserID,
	)
	return i, err
}

const getUserTimeRecords = `-- name: GetUserTimeRecords :many
SELECT id, start_time, stop_time, duration, user_id FROM time_records WHERE user_id = $1
`

func (q *Queries) GetUserTimeRecords(ctx context.Context, userID uuid.UUID) ([]TimeRecord, error) {
	rows, err := q.db.QueryContext(ctx, getUserTimeRecords, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TimeRecord
	for rows.Next() {
		var i TimeRecord
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.StopTime,
			&i.Duration,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeRecord = `-- name: UpdateTimeRecord :one
UPDATE time_records
SET stop_time = $1, duration = $1 - start_time
WHERE id = $2
RETURNING id, start_time, stop_time, duration, user_id
`

type UpdateTimeRecordParams struct {
	StopTime sql.NullTime
	ID       uuid.UUID
}

func (q *Queries) UpdateTimeRecord(ctx context.Context, arg UpdateTimeRecordParams) (TimeRecord, error) {
	row := q.db.QueryRowContext(ctx, updateTimeRecord, arg.StopTime, arg.ID)
	var i TimeRecord
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.StopTime,
		&i.Duration,
		&i.UserID,
	)
	return i, err
}
